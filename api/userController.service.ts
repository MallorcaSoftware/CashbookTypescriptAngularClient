/**
 * cashbook REST API
 * API to communicate with cashbook!
 *
 * OpenAPI spec version: 1.0
 * Contact: pascal.wild@mallorca-software.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { ResponseEntity } from '../model/responseEntity';
import { UserChangePasswordDto } from '../model/userChangePasswordDto';
import { UserDto } from '../model/userDto';
import { UserPasswordResetDto } from '../model/userPasswordResetDto';
import { UserPasswordResetRequestDto } from '../model/userPasswordResetRequestDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class UserControllerService {

    protected basePath = 'http://cashbook.api.mallorca-software.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * changePassword
     * 
     * @param userChangePasswordDto userChangePasswordDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public changePasswordUsingPOST(userChangePasswordDto: UserChangePasswordDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public changePasswordUsingPOST(userChangePasswordDto: UserChangePasswordDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public changePasswordUsingPOST(userChangePasswordDto: UserChangePasswordDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public changePasswordUsingPOST(userChangePasswordDto: UserChangePasswordDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userChangePasswordDto === null || userChangePasswordDto === undefined) {
            throw new Error('Required parameter userChangePasswordDto was null or undefined when calling changePasswordUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseEntity>(`${this.configuration.basePath}/api/users/changePassword`,
            userChangePasswordDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * createUser
     * 
     * @param userDto userDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createUserUsingPOST(userDto: UserDto, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public createUserUsingPOST(userDto: UserDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public createUserUsingPOST(userDto: UserDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public createUserUsingPOST(userDto: UserDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userDto === null || userDto === undefined) {
            throw new Error('Required parameter userDto was null or undefined when calling createUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserDto>(`${this.configuration.basePath}/api/users`,
            userDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * findUser
     * 
     * @param username username
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findUserUsingGET(username: string, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public findUserUsingGET(username: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public findUserUsingGET(username: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public findUserUsingGET(username: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (username === null || username === undefined) {
            throw new Error('Required parameter username was null or undefined when calling findUserUsingGET.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/api/users/${encodeURIComponent(String(username))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * getCurrentUser
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCurrentUserUsingGET(observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public getCurrentUserUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public getCurrentUserUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public getCurrentUserUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<UserDto>(`${this.configuration.basePath}/api/users/current`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * passwordReset
     * 
     * @param userPasswordResetDto userPasswordResetDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public passwordResetUsingPOST(userPasswordResetDto: UserPasswordResetDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public passwordResetUsingPOST(userPasswordResetDto: UserPasswordResetDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public passwordResetUsingPOST(userPasswordResetDto: UserPasswordResetDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public passwordResetUsingPOST(userPasswordResetDto: UserPasswordResetDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userPasswordResetDto === null || userPasswordResetDto === undefined) {
            throw new Error('Required parameter userPasswordResetDto was null or undefined when calling passwordResetUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseEntity>(`${this.configuration.basePath}/api/users/passwordReset`,
            userPasswordResetDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * registerUser
     * 
     * @param userDto userDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public registerUserUsingPOST(userDto: UserDto, observe?: 'body', reportProgress?: boolean): Observable<UserDto>;
    public registerUserUsingPOST(userDto: UserDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<UserDto>>;
    public registerUserUsingPOST(userDto: UserDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<UserDto>>;
    public registerUserUsingPOST(userDto: UserDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userDto === null || userDto === undefined) {
            throw new Error('Required parameter userDto was null or undefined when calling registerUserUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<UserDto>(`${this.configuration.basePath}/api/users/register`,
            userDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * requestPasswordReset
     * 
     * @param userPasswordResetRequestDto userPasswordResetRequestDto
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public requestPasswordResetUsingPOST(userPasswordResetRequestDto: UserPasswordResetRequestDto, observe?: 'body', reportProgress?: boolean): Observable<ResponseEntity>;
    public requestPasswordResetUsingPOST(userPasswordResetRequestDto: UserPasswordResetRequestDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ResponseEntity>>;
    public requestPasswordResetUsingPOST(userPasswordResetRequestDto: UserPasswordResetRequestDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ResponseEntity>>;
    public requestPasswordResetUsingPOST(userPasswordResetRequestDto: UserPasswordResetRequestDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userPasswordResetRequestDto === null || userPasswordResetRequestDto === undefined) {
            throw new Error('Required parameter userPasswordResetRequestDto was null or undefined when calling requestPasswordResetUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<ResponseEntity>(`${this.configuration.basePath}/api/users/passwordResetRequest`,
            userPasswordResetRequestDto,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
